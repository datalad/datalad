.. The content of this file was auto-generate by your mad uncle from Germany
   using the cast2rst script and a recorded asciicast as input.

   Do not edit this file!



It is often helpful to keep track of the origin of data files. When
generating data from other data, it is also useful to know what
process led to these new data and what inputs were used.

DataLad can be used to keep such a record...

We start with a dataset

.. code-block:: ansi-color

   [1;36m~[0m % datalad create demo
   [[1;37mINFO   [0m] Creating a new annex repo at /demo/demo 
   [1;1mcreate[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   [0m[1;36m~[0m % cd demo


Let's say we are taking a mosaic image composed of flowers from
Wikimedia. We want extract some of them into individual files --
maybe to use them in an art project later.

We can use git-annex to obtain this image straight from the web

.. code-block:: ansi-color

   [1;36m~/demo[0m % git annex addurl https://upload.wikimedia.org/wikipedia/commons/a/a5/Flower_poster_2.jpg --file sources/flowers.jpg
   addurl sources/flowers.jpg (downloading https://upload.wikimedia.org/wikipedia/commons/a/a5/Flower_poster_2.jpg ...) 
   /demo/demo/.git/ann 100%[===================>]   4.28M  5.19MB/s    in 0.8s    
   2018-03-15 15:47:37 URL:https://upload.wikimedia.org/wikipedia/commons/a/a5/Flower_poster_2.jpg [4487679/4487679] -> "/demo/demo/.git/annex/tmp/URL-s4487679--https&c%%upload.wikimedia.org%wi-f0864ab780277edffb909382d1d1bb88" [1]
   ok
   (recording state in git...)


We save it in the dataset

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad save -m 'Added flower mosaic from wikimedia'
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)


Now we can use DataLad's 'run' command to process this image
and extract one of the mosaic tiles into its own JPEG file.
Let's extract the St. Bernard's Lily from the upper left corner.

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad run convert -extract 1522x1522+0+0 sources/flowers.jpg st-bernard.jpg
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): st-bernard.jpg ([1;35mfile[0m)
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 1)
     save (ok: 1)


All we have to do is prefix ANY command with 'datalad run'. DataLad
will inspect the dataset after the command has finished and save
all modifications.

In order to reliably detect modifications, a dataset must not contain
unsaved modifications prior to running a command. For example, if
we try to extract the Scarlet Pimpernel image with unsaved changes...

.. code-block:: ansi-color

   [1;36m~/demo[0m % touch dirt
   [1;36m~/demo[0m % datalad run convert -extract 1522x1522+1470+1470 sources/flowers.jpg pimpernel.jpg
   [1;1mrun[0m([1;33mimpossible[0m): /demo/demo ([1;35mdataset[0m) [unsaved modifications present, cannot detect changes by command]


It has to be clean

.. code-block:: ansi-color

   [1;36m~/demo[0m % rm dirt
   [1;36m~/demo[0m % datalad run convert -extract 1522x1522+1470+1470 sources/flowers.jpg pimpernel.jpg
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): pimpernel.jpg ([1;35mfile[0m)
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 1)
     save (ok: 1)


Every processing step is saved in the dataset, including the exact
command and the content that was changed.

.. code-block:: ansi-color

   [1;36m~/demo[0m % git show --stat
   [33mcommit 73832b3af2a24d7cdaea964b934f1ede23a69c69[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
   Author: DataLad Demo <demo@datalad.org>
   Date:   Thu Mar 15 15:48:34 2018 +0100
   
       [DATALAD RUNCMD] convert -extract 1522x1522+1470+1470 sou...
       
       === Do not change lines below ===
       {
        "pwd": ".",
        "cmd": [
         "convert",
         "-extract",
         "1522x1522+1470+1470",
         "sources/flowers.jpg",
         "pimpernel.jpg"
        ],
        "exit": 0,
        "chain": []
       }
       ^^^ Do not change lines above ^^^
   
    pimpernel.jpg | 1 [32m+[m
    1 file changed, 1 insertion(+)


On top of that, the origin of any dataset content obtained from
elsewhere is on record too

.. code-block:: ansi-color

   [1;36m~/demo[0m % git annex whereis sources/flowers.jpg
   whereis sources/flowers.jpg (2 copies) 
     	00000000-0000-0000-0000-000000000001 -- web
      	3b96f81f-2e68-4848-a30c-4bd31c555cb3 -- mih@meiner:~/demo [here]
   
     web: https://upload.wikimedia.org/wikipedia/commons/a/a5/Flower_poster_2.jpg
   ok


Based on this information, we can always reconstruct how any data
file came to be -- across the entire life-time of a project

.. code-block:: ansi-color

   [1;36m~/demo[0m % git log --oneline @~3..@
   [33m73832b3[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m [DATALAD RUNCMD] convert -extract 1522x1522+1470+1470 sou...
   [33mcce0c79[m [DATALAD RUNCMD] convert -extract 1522x1522+0+0 sources/f...
   [33m8a21b21[m Added flower mosaic from wikimedia
   [1;36m~/demo[0m % datalad diff --revision @~3..@
            added(file): pimpernel.jpg
            added(file): sources/flowers.jpg
            added(file): st-bernard.jpg


We can also rerun any previous commands with 'datalad rerun'. Without
any arguments, the command from the last commit will be executed.

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad rerun
   [1;1munlock[0m([1;32mok[0m): pimpernel.jpg ([1;35mfile[0m)
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): pimpernel.jpg ([1;35mfile[0m)
   [1;1msave[0m([1;32mnotneeded[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 1)
     save (notneeded: 1)
     unlock (ok: 1)
   [0m[1;36m~/demo[0m % git log --oneline --graph --name-only @~3..@
   * [33m73832b3[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m [DATALAD RUNCMD] convert -extract 1522x1522+1470+1470 sou...
   [31m|[m pimpernel.jpg
   * [33mcce0c79[m [DATALAD RUNCMD] convert -extract 1522x1522+0+0 sources/f...
   [31m|[m st-bernard.jpg
   * [33m8a21b21[m Added flower mosaic from wikimedia
     sources/flowers.jpg


In this case, a new commit isn't created because the output file
didn't change. But let's say we add a step that displaces the Lily's
pixels by a random amount.

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad run convert -spread 10 st-bernard.jpg st-bernard-displaced.jpg
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): st-bernard-displaced.jpg ([1;35mfile[0m)
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 1)
     save (ok: 1)


Now, if we rerun the previous command, a new commit is created
because the output's content changed.

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad rerun
   [1;1munlock[0m([1;32mok[0m): st-bernard-displaced.jpg ([1;35mfile[0m)
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): st-bernard-displaced.jpg ([1;35mfile[0m)
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 1)
     save (ok: 1)
     unlock (ok: 1)
   [0m[1;36m~/demo[0m % git log --graph --oneline --name-only @~2..
   * [33m3b8c46b[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m [DATALAD RUNCMD] convert -spread 10 st-bernard.jpg st-ber...
   [31m|[m st-bernard-displaced.jpg
   * [33m40b2c50[m [DATALAD RUNCMD] convert -spread 10 st-bernard.jpg st-ber...
     st-bernard-displaced.jpg


(We don't actually want the repeated 'spread' command, so let's
reset to the parent commit.)

.. code-block:: ansi-color

   [1;36m~/demo[0m % git reset --hard @^
   HEAD is now at 40b2c50 [DATALAD RUNCMD] convert -spread 10 st-bernard.jpg st-ber...


We can also rerun multiple commits (with '--since') and choose
where HEAD is when we start rerunning from (with --onto). When both
arguments are set to empty strings, it means 'rerun all command
with HEAD at the parent of the first commit a command'.

In other words, you can 'replay' the commands.

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad rerun --since= --onto= --branch=verify
   [1;1munlock[0m([1;32mnotneeded[0m): st-bernard.jpg ([1;35mfile[0m) [not controlled by annex, nothing to unlock]
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): st-bernard.jpg ([1;35mfile[0m)
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   [1;1munlock[0m([1;32mnotneeded[0m): pimpernel.jpg ([1;35mfile[0m) [not controlled by annex, nothing to unlock]
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): pimpernel.jpg ([1;35mfile[0m)
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   [1;1munlock[0m([1;32mnotneeded[0m): st-bernard-displaced.jpg ([1;35mfile[0m) [not controlled by annex, nothing to unlock]
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): st-bernard-displaced.jpg ([1;35mfile[0m)
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 3)
     save (ok: 3)
     unlock (notneeded: 3)


Now we're on a new branch, 'verify', that contains the replayed
history.

.. code-block:: ansi-color

   [1;36m~/demo[0m % git log --oneline --graph master verify
   * [33me58b078[m[33m ([m[1;36mHEAD -> [m[1;32mverify[m[33m)[m [DATALAD RUNCMD] convert -spread 10 st-bernard.jpg st-ber...
   * [33m35623fd[m [DATALAD RUNCMD] convert -extract 1522x1522+1470+1470 sou...
   * [33m9f8f54d[m [DATALAD RUNCMD] convert -extract 1522x1522+0+0 sources/f...
   [31m|[m * [33m40b2c50[m[33m ([m[1;32mmaster[m[33m)[m [DATALAD RUNCMD] convert -spread 10 st-bernard.jpg st-ber...
   [31m|[m * [33m73832b3[m [DATALAD RUNCMD] convert -extract 1522x1522+1470+1470 sou...
   [31m|[m * [33mcce0c79[m [DATALAD RUNCMD] convert -extract 1522x1522+0+0 sources/f...
   [31m|[m[31m/[m  
   * [33m8a21b21[m Added flower mosaic from wikimedia
   * [33m14f64a7[m [DATALAD] new dataset
   * [33m3b50eb8[m [DATALAD] Set default backend for all files to be MD5E


Let's compare the two branches.

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad diff --revision master..verify
         modified(file): st-bernard-displaced.jpg


We can see that the step that involved a random component produced
different results.

And these are just two branches, so you can compare them using
normal Git operations. The next command, for example, marks which
commits are 'patch-equivalent'.

.. code-block:: ansi-color

   [1;36m~/demo[0m % git log --oneline --left-right --cherry-mark master...verify
   [33m> e58b078[m[33m ([m[1;36mHEAD -> [m[1;32mverify[m[33m)[m [DATALAD RUNCMD] convert -spread 10 st-bernard.jpg st-ber...
   [33m= 35623fd[m [DATALAD RUNCMD] convert -extract 1522x1522+1470+1470 sou...
   [33m= 9f8f54d[m [DATALAD RUNCMD] convert -extract 1522x1522+0+0 sources/f...
   [33m< 40b2c50[m[33m ([m[1;32mmaster[m[33m)[m [DATALAD RUNCMD] convert -spread 10 st-bernard.jpg st-ber...
   [33m= 73832b3[m [DATALAD RUNCMD] convert -extract 1522x1522+1470+1470 sou...
   [33m= cce0c79[m [DATALAD RUNCMD] convert -extract 1522x1522+0+0 sources/f...


Notice that all commits are marked as equivalent (=) except the
'random spread' ones.

 _______________________________________
/ Demo was using tools/cast2asciinema:  \
| line 119: datalad: command not found. |
\ Discover more at http://datalad.org   /
 ---------------------------------------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||


.. code-block:: ansi-color

   [1;36m~/demo[0m % d[Kexit
