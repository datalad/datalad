.. The content of this file was auto-generated by your mad uncle from Germany
   using the cast2rst script and a recorded asciicast as input.

   Do not edit this file!



Scientific studies should be reproducible, and with the increasing
accessibility of data, there is not much excuse for lack of
reproducibility anymore.

DataLad can help with the technical aspects of reproducible
science...

It always starts with a dataset

.. code-block:: ansi-color

   [1;36m~[0m % datalad create demo
   [[1;37mINFO   [0m] Creating a new annex repo at /demo/demo 
   [1;1mcreate[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   [0m[1;36m~[0m % cd demo


For this demo we are using two public brain imaging datasets that
were published on OpenFMRI.org, and are available from DataLad's
datasets.datalad.org

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad install -d . -s ///openfmri/ds000001 inputs/ds000001
   [[1;37mINFO   [0m] Cloning http://datasets.datalad.org/openfmri/ds000001 to '/demo/demo/inputs/ds000001' 
   [1;1madd[0m([1;32mok[0m): inputs/ds000001 ([1;35mdataset[0m) [added new subdataset]
   [1;1madd[0m([1;32mnotneeded[0m): inputs/ds000001 ([1;35mdataset[0m) [nothing to add from /demo/demo/inputs/ds000001]
   [1;1madd[0m([1;32mnotneeded[0m): .gitmodules ([1;35mfile[0m) [already included in the dataset]
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   [[1;37mINFO   [0m] access to dataset sibling "datalad" not auto-enabled, enable with:
   | 		datalad siblings -d "/demo/demo/inputs/ds000001" enable -s datalad 
   [1;1minstall[0m([1;32mok[0m): inputs/ds000001 ([1;35mdataset[0m)
   action summary:
     add (notneeded: 2, ok: 1)
     install (ok: 1)
     save (ok: 1)


BTW: '///' is just short for http://datasets.datalad.org

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad install -d . -s ///openfmri/ds000002 inputs/ds000002
   [[1;37mINFO   [0m] Cloning http://datasets.datalad.org/openfmri/ds000002 to '/demo/demo/inputs/ds000002' 
   [1;1madd[0m([1;32mok[0m): inputs/ds000002 ([1;35mdataset[0m) [added new subdataset]
   [1;1madd[0m([1;32mnotneeded[0m): inputs/ds000002 ([1;35mdataset[0m) [nothing to add from /demo/demo/inputs/ds000002]
   [1;1madd[0m([1;32mnotneeded[0m): .gitmodules ([1;35mfile[0m) [already included in the dataset]
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   [[1;37mINFO   [0m] access to dataset sibling "datalad" not auto-enabled, enable with:
   | 		datalad siblings -d "/demo/demo/inputs/ds000002" enable -s datalad 
   [1;1minstall[0m([1;32mok[0m): inputs/ds000002 ([1;35mdataset[0m)
   action summary:
     add (notneeded: 2, ok: 1)
     install (ok: 1)
     save (ok: 1)


Both datasets are now registered as subdatasets, and their precise
versions are on record

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad --output-format '{path}: {revision_descr}' subdatasets
   [[1;33mWARNING[0m] Result rendering failed for: {'status': 'ok', 'gitmodule_name': u'inputs/ds000001', 'parentds': '/demo/demo', 'gitmodule_url': u'http://datasets.datalad.org/openfmri/ds000001/.git', 'action': 'subdataset', 'path': '/demo/demo/inputs/ds000001', 'type': 'dataset', 'refds': '/demo/demo', 'revision': 'f47099a5124e8f619f763f44f70e1faf5154d41a'} [u'revision_descr' [base.py:<lambda>:412]] 
   [[1;33mWARNING[0m] Result rendering failed for: {'status': 'ok', 'gitmodule_name': u'inputs/ds000002', 'parentds': '/demo/demo', 'gitmodule_url': u'http://datasets.datalad.org/openfmri/ds000002/.git', 'action': 'subdataset', 'path': '/demo/demo/inputs/ds000002', 'type': 'dataset', 'refds': '/demo/demo', 'revision': 'e1b7df06da8dd8f1d8802d699d9ad7781fad8bb6'} [u'revision_descr' [base.py:<lambda>:412]] 


However, very little data were actually downloaded (the full datasets
are several gigabytes in size):

.. code-block:: ansi-color

   [1;36m~/demo[0m % du -sh inputs/
   20M	inputs/


DataLad datasets are fairly lightweight in size, they only contain
pointers to data and history information in their minimal form.

Both datasets contain brain imaging data, and are compliant with
the BIDS standard. This makes it really easy to locate particular
images and perform analysis across datasets.

Here we will use a small script that performs 'brain extraction'
using FSL as a stand-in for a full analysis pipeline

.. code-block:: ansi-color

   [1;36m~/demo[0m % mkdir code
   [1;36m~/demo[0m % cat << EOT > code/brain_extraction.sh
   > # enable FSL
   > . /etc/fsl/5.0/fsl.sh
   > 
   > # obtain all inputs
   > datalad get \$@
   > # perform brain extraction
   > count=1
   > for nifti in \$@; do
   >   subdir="sub-\$(printf %03d \$count)"
   >   mkdir -p \$subdir
   >   echo "Processing \$nifti"
   >   bet \$nifti \$subdir/anat -m
   >   count=\$((count + 1)) 
   > done
   > EOT


Note that this script uses the 'datalad get' command which
automatically obtains the required files from their remote source --
we will see this in action shortly

We are saving this script in the dataset. This way we will know
exactly which code was used for the analysis. Also, we track this
code file with Git, so we can see more easily how it was edited
over time.

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad add code -m "Brain extraction script" --to-git
   [1;1madd[0m([1;32mok[0m): /demo/demo/code/brain_extraction.sh ([1;35mfile[0m) [non-large file; adding content to git repository]
   [1;1madd[0m([1;32mok[0m): /demo/demo/code ([1;35mdirectory[0m)
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 2)
     save (ok: 1)


In addition, we will "tag" this state of the dataset. This is
optional, but it can help to identify important milestones more
easily

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad save --version-tag setup_done
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)


Now we can run our analysis code to produce results. However, instead
of running it directly, we will run it with DataLad -- this will
automatically create a record of exactly how this script was executed

For this demo we will just run it on the structural images of
the first subject from each dataset. The uniform structure of the
datasets makes this very easy. Of course we could run it on all
subjects; we are simply saving some time for this demo.
While the command runs, you should notice a few things:

1) We run this command with 'bash -e' to stop at any failure that
may occur

2) You'll see the required data files being obtained as they
are needed -- and only those that are actually required will be
downloaded

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad run bash -e code/brain_extraction.sh inputs/ds*/sub-01/anat/sub-01_T1w.nii.gz
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [1;1mget[0m([1;32mok[0m): /demo/demo/inputs/ds000001/sub-01/anat/sub-01_T1w.nii.gz ([1;35mfile[0m)
   [1;1mget[0m([1;32mok[0m): /demo/demo/inputs/ds000002/sub-01/anat/sub-01_T1w.nii.gz ([1;35mfile[0m)
   action summary:
     get (ok: 2)
   [0mProcessing inputs/ds000001/sub-01/anat/sub-01_T1w.nii.gz
   Processing inputs/ds000002/sub-01/anat/sub-01_T1w.nii.gz
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): sub-002/anat.nii.gz ([1;35mfile[0m)
   [1;1madd[0m([1;32mok[0m): sub-001/anat.nii.gz ([1;35mfile[0m)
   [1;1madd[0m([1;32mok[0m): sub-002/anat_mask.nii.gz ([1;35mfile[0m)
   [1;1madd[0m([1;32mok[0m): sub-001/anat_mask.nii.gz ([1;35mfile[0m)
   [1;1msave[0m([1;32mok[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 4)
     save (ok: 1)


The analysis step is done, all generated results were saved in the
dataset. All changes, including the command that caused them are
on record

.. code-block:: ansi-color

   [1;36m~/demo[0m % git show --stat
   [33mcommit 7607ddef8c03dc5516869f1e35025083772efc5a[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
   Author: DataLad Demo <demo@datalad.org>
   Date:   Fri Mar 16 08:26:11 2018 +0100
   
       [DATALAD RUNCMD] bash -e code/brain_extraction.sh inputs/...
       
       === Do not change lines below ===
       {
        "pwd": ".",
        "cmd": [
         "bash",
         "-e",
         "code/brain_extraction.sh",
         "inputs/ds000001/sub-01/anat/sub-01_T1w.nii.gz",
         "inputs/ds000002/sub-01/anat/sub-01_T1w.nii.gz"
        ],
        "exit": 0,
        "chain": []
       }
       ^^^ Do not change lines above ^^^
   
    sub-001/anat.nii.gz      | 1 [32m+[m
    sub-001/anat_mask.nii.gz | 1 [32m+[m
    sub-002/anat.nii.gz      | 1 [32m+[m
    sub-002/anat_mask.nii.gz | 1 [32m+[m
    4 files changed, 4 insertions(+)


DataLad has enough information stored to be able to re-run a command.

On command exit, it will inspect the results and save them again,
but only if they are different.

In our case, the re-run yields bit-identical results, hence nothing
new is saved.

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad rerun
   [1;1munlock[0m([1;32mok[0m): sub-001/anat.nii.gz ([1;35mfile[0m)
   [1;1munlock[0m([1;32mok[0m): sub-001/anat_mask.nii.gz ([1;35mfile[0m)
   [1;1munlock[0m([1;32mok[0m): sub-002/anat.nii.gz ([1;35mfile[0m)
   [1;1munlock[0m([1;32mok[0m): sub-002/anat_mask.nii.gz ([1;35mfile[0m)
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [1;1mget[0m([1;32mnotneeded[0m): /demo/demo/inputs/ds000001/sub-01/anat/sub-01_T1w.nii.gz ([1;35mfile[0m) [already present]
   [1;1mget[0m([1;32mnotneeded[0m): /demo/demo/inputs/ds000002/sub-01/anat/sub-01_T1w.nii.gz ([1;35mfile[0m) [already present]
   action summary:
     get (notneeded: 2)
   [0mProcessing inputs/ds000001/sub-01/anat/sub-01_T1w.nii.gz
   Processing inputs/ds000002/sub-01/anat/sub-01_T1w.nii.gz
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): sub-002/anat.nii.gz ([1;35mfile[0m)
   [1;1madd[0m([1;32mok[0m): sub-001/anat.nii.gz ([1;35mfile[0m)
   [1;1madd[0m([1;32mok[0m): sub-002/anat_mask.nii.gz ([1;35mfile[0m)
   [1;1madd[0m([1;32mok[0m): sub-001/anat_mask.nii.gz ([1;35mfile[0m)
   [1;1msave[0m([1;32mnotneeded[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 4)
     save (notneeded: 1)
     unlock (ok: 4)


Now that we are done, and have checked that we can reproduce the
results ourselves, we can clean up

DataLad can easily verify if any part of our input dataset was
modified since we configured our analysis

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad diff --revision setup_done inputs


Nothing was changed.

With DataLad with don't have to keep those inputs around -- without
losing the ability to reproduce an analysis.

Let's uninstall them -- checking the size on disk before and after

.. code-block:: ansi-color

   [1;36m~/demo[0m % du -sh
   32M	.
   [1;36m~/demo[0m % datalad uninstall inputs/*
   [1;1mdrop[0m([1;32mok[0m): /demo/demo/inputs/ds000002/sub-01/anat/sub-01_T1w.nii.gz ([1;35mfile[0m) [checking http://openneuro.s3.amazonaws.com/ds000002/ds000002_R2.0.0/uncompressed/sub-01/anat/sub-01_T1w.nii.gz?versionId=vXK2.bQ360phhPqbVV_n6RMYqaWAy4Dg...]
   [1;1mdrop[0m([1;32mok[0m): /demo/demo/inputs/ds000002 ([1;35mdirectory[0m)
   [1;1muninstall[0m([1;32mok[0m): /demo/demo/inputs/ds000002 ([1;35mdataset[0m)
   [1;1mdrop[0m([1;32mok[0m): /demo/demo/inputs/ds000001/sub-01/anat/sub-01_T1w.nii.gz ([1;35mfile[0m) [checking http://openneuro.s3.amazonaws.com/ds000001/ds000001_R1.1.0/uncompressed/sub001/anatomy/highres001.nii.gz?versionId=8TJ17W9WInNkQPdiQ9vS7wo8ZJ9llF80...]
   [1;1mdrop[0m([1;32mok[0m): /demo/demo/inputs/ds000001 ([1;35mdirectory[0m)
   [1;1muninstall[0m([1;32mok[0m): /demo/demo/inputs/ds000001 ([1;35mdataset[0m)
   action summary:
     drop (ok: 4)
     uninstall (ok: 2)
   [0m[1;36m~/demo[0m % du -sh .
   3.0M	.


All inputs are gone...

.. code-block:: ansi-color

   [1;36m~/demo[0m % ls inputs/*
   inputs/ds000001:
   
   inputs/ds000002:


Only the remaining data (our code and the results) need to be kept
and require a backup for long term archival. Everything else can
be re-obtained as needed, when needed.

As DataLad knows everything needed about the inputs, including where
to get the right version, we can re-run the analysis with a single
command. Watch how DataLad re-obtains all required data, re-runs
the code, and checks that none of the results changed and need saving

.. code-block:: ansi-color

   [1;36m~/demo[0m % datalad rerun
   [1;1munlock[0m([1;32mok[0m): sub-001/anat.nii.gz ([1;35mfile[0m)
   [1;1munlock[0m([1;32mok[0m): sub-001/anat_mask.nii.gz ([1;35mfile[0m)
   [1;1munlock[0m([1;32mok[0m): sub-002/anat.nii.gz ([1;35mfile[0m)
   [1;1munlock[0m([1;32mok[0m): sub-002/anat_mask.nii.gz ([1;35mfile[0m)
   [[1;37mINFO   [0m] == Command start (output follows) ===== 
   [[1;37mINFO   [0m] Cloning http://datasets.datalad.org/openfmri/ds000001/.git to '/demo/demo/inputs/ds000001' 
   [[1;37mINFO   [0m] access to dataset sibling "datalad" not auto-enabled, enable with:
   | 		datalad siblings -d "/demo/demo/inputs/ds000001" enable -s datalad 
   [1;1minstall[0m([1;32mok[0m): /demo/demo/inputs/ds000001 ([1;35mdataset[0m) [Installed subdataset in order to get /demo/demo/inputs/ds000001/sub-01/anat/sub-01_T1w.nii.gz]
   [[1;37mINFO   [0m] Cloning http://datasets.datalad.org/openfmri/ds000002/.git to '/demo/demo/inputs/ds000002' 
   [[1;37mINFO   [0m] access to dataset sibling "datalad" not auto-enabled, enable with:
   | 		datalad siblings -d "/demo/demo/inputs/ds000002" enable -s datalad 
   [1;1minstall[0m([1;32mok[0m): /demo/demo/inputs/ds000002 ([1;35mdataset[0m) [Installed subdataset in order to get /demo/demo/inputs/ds000002/sub-01/anat/sub-01_T1w.nii.gz]
   [1;1mget[0m([1;32mok[0m): /demo/demo/inputs/ds000001/sub-01/anat/sub-01_T1w.nii.gz ([1;35mfile[0m)
   [1;1mget[0m([1;32mok[0m): /demo/demo/inputs/ds000002/sub-01/anat/sub-01_T1w.nii.gz ([1;35mfile[0m)
   action summary:
     get (ok: 2)
     install (ok: 2)
   [0mProcessing inputs/ds000001/sub-01/anat/sub-01_T1w.nii.gz
   Processing inputs/ds000002/sub-01/anat/sub-01_T1w.nii.gz
   [[1;37mINFO   [0m] == Command exit (modification check follows) ===== 
   [1;1madd[0m([1;32mok[0m): sub-002/anat.nii.gz ([1;35mfile[0m)
   [1;1madd[0m([1;32mok[0m): sub-001/anat.nii.gz ([1;35mfile[0m)
   [1;1madd[0m([1;32mok[0m): sub-002/anat_mask.nii.gz ([1;35mfile[0m)
   [1;1madd[0m([1;32mok[0m): sub-001/anat_mask.nii.gz ([1;35mfile[0m)
   [1;1msave[0m([1;32mnotneeded[0m): /demo/demo ([1;35mdataset[0m)
   action summary:
     add (ok: 4)
     save (notneeded: 1)
     unlock (ok: 4)


Reproduced!

This dataset could now be published and enable anyone to replicate
the exact same analysis. Public data for the win!

 _____________________________________
/ Demo was using datalad 0.9.2.dev1.  \
\ Discover more at http://datalad.org /
 -------------------------------------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||


.. code-block:: ansi-color

   [1;36m~/demo[0m % exit
