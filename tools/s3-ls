#!/usr/bin/python
# coding: utf-8

from __future__ import print_function
import sys
import boto
from boto.s3.key import Key
from boto.exception import S3ResponseError
from ConfigParser import SafeConfigParser

from six.moves.urllib.request import urlopen, Request
from six.moves.urllib.error import HTTPError

#bucket_prefix = 'datalad-test0-versioned/3versions-allversioned.txt'
#bucket_prefix = 'openfmri/ds001/demographics.txt'
#config_file = '/home/yoh/.s3cfg-datalad'

if len(sys.argv) != 3:
    sys.stderr.write("Format: %s s3cmd-config-file bucket/prefix" % sys.argv[0])

config_file, bucket_prefix = sys.argv[1:3]

if bucket_prefix.startswith('s3://'):
    bucket_prefix = bucket_prefix[5:]

config = SafeConfigParser(); config.read(config_file)

access_key = config.get('default', 'access_key')
secret_key = config.get('default', 'secret_key')


conn = boto.connect_s3(access_key, secret_key)
bucket_name, prefix = bucket_prefix.split('/', 1)
print("Connecting to bucket: %s" % bucket_name)

try:
    bucket = conn.get_bucket(bucket_name)
except S3ResponseError as e:
    print("E: Cannot access bucket %s by name" % bucket_name)
    all_buckets = conn.get_all_buckets()
    all_bucket_names = [b.name for b in all_buckets]
    print("I: Found following buckets %s" % ', '.join(all_bucket_names))
    if bucket_name in all_bucket_names:
        bucket = all_buckets[all_bucket_names.index(bucket_name)]
    else:
        raise RuntimeError("E: no bucket named %s thus exiting" % bucket_name)


info = []
for iname, imeth in [
    ("Versioning", bucket.get_versioning_status),
    ("   Website", bucket.get_website_endpoint),
    ("       ACL", bucket.get_acl),
]:
    try:
        ival = imeth()
    except Exception as e:
        ival = str(e).split('\n')[0]
    info.append(" {iname}: {ival}".format(**locals()))
print("Bucket info:\n %s" % '\n '.join(info))

prefix_all_versions = list(bucket.list_versions(prefix))

max_length = max((len(e.name) for e in prefix_all_versions))
for e in prefix_all_versions:
    print(("%%-%ds %%s" % max_length) % (e.name, e.last_modified), end=' ')
    if isinstance(e, Key):
        url = "http://{e.bucket.name}.s3.amazonaws.com/{e.name}?versionId={e.version_id}".format(e=e)
        try:
            _ = urlopen(Request(url))
            urlok = "OK"
        except HTTPError as err:
            urlok = "E: %s" % err.code

        try:
            acl = e.get_acl()
        except S3ResponseError as err:
            acl = err.message

        content = ""
        # IO intensive, make an option finally!
        try:
            # _ = e.next()[:5]  if we are able to fetch the content
            content = repr(e.get_contents_as_string(version_id=e.version_id))
            #content = "[S3: OK]"
        except S3ResponseError as err:
            content = err.message
        finally:
            content = " " + content

        print("ver:%-32s  acl:%s  %s [%s]%s" % (e.version_id, acl, url, urlok, content))
    else:
        print("del")

